{"version":3,"file":"line-icon.stories-1a75bc84.js","sources":["../../src/gzmtr/line-icon/line-icon-type2.tsx","../../src/gzmtr/line-icon/interchange-box.tsx","../../node_modules/@railmapgen/rmg-palette-resources/types.js","../../node_modules/@railmapgen/rmg-palette-resources/cached-fetch.js","../../node_modules/@railmapgen/rmg-palette-resources/updater.js","../../src/gzmtr/line-icon/line-icon.tsx"],"sourcesContent":["import React, { memo, useEffect, useRef, useState } from 'react';\nimport { MAX_WIDTH, Name } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","export var MonoColour;\n(function (MonoColour) {\n    MonoColour[\"black\"] = \"#000\";\n    MonoColour[\"white\"] = \"#fff\";\n})(MonoColour || (MonoColour = {}));\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nlet RESPONSE_CACHE = {};\nexport const cachedFetch = (url, init) => __awaiter(void 0, void 0, void 0, function* () {\n    if (url in RESPONSE_CACHE) {\n        return RESPONSE_CACHE[url];\n    }\n    const res = yield fetch(url, init);\n    const data = yield res.json();\n    RESPONSE_CACHE[url] = data;\n    return data;\n});\nexport const _clearCache = () => {\n    RESPONSE_CACHE = {};\n};\nexport const getPalette = (cityId, signal) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield cachedFetch(`/rmg-palette/resources/palettes/${cityId}.json`, { signal });\n});\nexport const getCityList = (signal) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield cachedFetch(`/rmg-palette/resources/city-config.json`, { signal });\n});\nexport const getCountryList = (signal) => __awaiter(void 0, void 0, void 0, function* () {\n    return yield cachedFetch(`/rmg-palette/resources/country-config.json`, { signal });\n});\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MonoColour } from './types';\nimport { cachedFetch, getPalette } from './cached-fetch';\nconst getHistory = () => __awaiter(void 0, void 0, void 0, function* () {\n    return yield cachedFetch(`/rmg-palette/resources/history.json`);\n});\nexport const isUpdateRequired = (cityId, since) => __awaiter(void 0, void 0, void 0, function* () {\n    const history = yield getHistory();\n    const lastCommitted = history[cityId];\n    if (!lastCommitted) {\n        return true;\n    }\n    else {\n        // add half day buffer\n        return lastCommitted + 12 * 60 * 60000 > since;\n    }\n});\n/**\n * @param oldTheme\n * @param since - Timestamp in milliseconds\n * @param throwError - If undefined or false, error will not be thrown and old theme is returned\n */\nexport const updateTheme = (oldTheme, since, throwError) => __awaiter(void 0, void 0, void 0, function* () {\n    const [cityId, lineId] = oldTheme;\n    if (cityId === 'other') {\n        return oldTheme;\n    }\n    if (since) {\n        try {\n            const required = yield isUpdateRequired(cityId, since);\n            if (!required) {\n                return oldTheme;\n            }\n        }\n        catch (e) {\n            if (throwError) {\n                console.error(`[rmg-palette] updateTheme(${cityId}, ${since}), unable to get palette update history, update aborted`, e);\n                throw e;\n            }\n            else {\n                console.warn(`[rmg-palette] updateTheme(${cityId}, ${since}), unable to get palette update history, proceed anyway`, e);\n            }\n        }\n    }\n    try {\n        const palette = yield getPalette(cityId);\n        const serverEntry = palette.find(p => p.id === lineId);\n        if (serverEntry) {\n            return [cityId, lineId, serverEntry.colour, serverEntry.fg || MonoColour.white];\n        }\n        else {\n            console.warn(`[rmg-palette] updateTheme(${cityId}, ${lineId}), line does not exist, returning old theme`);\n            return oldTheme;\n        }\n    }\n    catch (e) {\n        if (throwError) {\n            console.error(`[rmg-palette] updateTheme(${cityId}, ${lineId}), unexpected error occurs`, e);\n            throw e;\n        }\n        else {\n            console.warn(`[rmg-palette] updateTheme(${cityId}, ${lineId}), unexpected error occurs, returning old theme`, e);\n            return oldTheme;\n        }\n    }\n});\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\nimport { ColourHex, MonoColour } from '@railmapgen/rmg-palette-resources';\n\nexport type Name = [string, string];\nexport const MAX_WIDTH = 42;\n\nexport interface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        const transforms = {\n            nameZh: {\n                // 7.3 -- original y\n                // 13.5 -- text height\n                // (1 - scale) -- offset multiplier\n                // scale -- visualisation offset\n                // 2 -- divide into halves (top and bottom)\n                y: 7.3 + (13.5 * (1 - nameZhScale) * nameZhScale) / 2,\n            },\n            nameEn: {\n                y: 19.5 - (9 * (1 - nameEnScale) * nameEnScale) / 2,\n            },\n        };\n\n        return (\n            <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`translate(0,${transforms.nameZh.y})scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7} className=\"rmg-name__zh\">\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7} className=\"rmg-name__zh\">\n                                        {lineName[0].slice(commonPart.length)}\n                                    </tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`translate(0,${transforms.nameEn.y})scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.passed === nextProps.passed\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^(\\w+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n"],"names":["LineIconType2","memo","props","lineName","commonPart","wrapperEl","useRef","bBox","setBBox","useState","useEffect","scale","MAX_WIDTH","dx","dy","jsx","jsxs","prevProps","nextProps","InterchangeBox","MonoColour","this","LineIcon","foregroundColour","backgroundColour","passed","type","getType","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","transforms","Fragment","name","matchResultForType1","matchResultForType2","text"],"mappings":"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","x_google_ignoreList":[2,3,4]}